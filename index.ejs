<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Pong Game</title>
  <h1 style="color: white">THE PONG GAME</h1>
  <style>
    body {
      text-align: center;
      background-color: rgb(24, 180, 24);
      margin: 0;
    }
    
    canvas {
      display: block;
      margin: auto;
      background-color: #000000;
    }
    
    #port1, #port2 {
      width: 15px;
      height: 150px;
      background-color: #ff0000;
      border: 5px solid black;
      position: absolute;
    }
  </style>
</head>
<body>
  <div id="pongCanvas">
    <div id="port1" style="left: 0; top: 38%;"></div>
    <div id="port2" style="right: 0; top: 38%;"></div>
    <canvas id="canvas" width="1000" height="600"></canvas>
  </div>  

  <script>
    const canvas = document.getElementById('canvas');
    const context = canvas.getContext('2d');

    const DIRECTION = {
      UP: 'UP',
      DOWN: 'DOWN',
    };

    const ws = new WebSocket('ws://localhost:3000');

    const player1 = {
      x: 20, // Posizione orizzontale del giocatore 1
      y: canvas.height / 2 - 50, // Posizione verticale del giocatore 1 (centrato verticalmente)
      width: 10, // Larghezza del giocatore 1
      height: 100, // Altezza del giocatore 1
      color: '#ffffff',
      speed: 5,
      direction: null,
    };

    const player2 = {
      x: canvas.width - 30, // Posizione orizzontale del giocatore 2
      y: canvas.height / 2 - 50, // Posizione verticale del giocatore 2 (centrato verticalmente)
      width: 10, // Larghezza del giocatore 2
      height: 100, // Altezza del giocatore 2
      color: '#ffffff',
      speed: 5,
      direction: null,
    };
    
    const ball = {
      x: canvas.width / 2, // Posizione orizzontale iniziale della palla (centrata orizzontalmente)
      y: canvas.height / 2, // Posizione verticale iniziale della palla (centrata verticalmente)
      size: 10, // Dimensione della palla (diametro)
      speedX: 5,
      speedY: 5,
      color: '#ffffff',
    };

    function draw() {
      // Clear the canvas
      context.clearRect(0, 0, canvas.width, canvas.height);

      // Draw the player1 and the player2
      context.fillStyle = player1.color;
      context.fillRect(0, player1.y, player1.width, player1.height);
      context.fillStyle = player2.color;
      context.fillRect(canvas.width - player2.width, player2.y, player2.width, player2.height);

      // Draw the ball
      context.fillStyle = ball.color;
      context.beginPath();
      context.arc(ball.x, ball.y, ball.size, 0, Math.PI * 2);
      context.fill();
    }

    function update() {
  // Update player 1 position
  if (player1.direction === DIRECTION.UP && player1.y > 0) {
    player1.y -= player1.speed;
  } else if (player1.direction === DIRECTION.DOWN && player1.y + player1.height < canvas.height) {
    player1.y += player1.speed;
  }

  // Update player 2 position
  if (player2.direction === DIRECTION.UP && player2.y > 0) {
    player2.y -= player2.speed;
  } else if (player2.direction === DIRECTION.DOWN && player2.y + player2.height < canvas.height) {
    player2.y += player2.speed;
  }

  // Update ball position
  ball.x += ball.speedX;
  ball.y += ball.speedY;

  // Check ball collisions with the walls
  if (ball.y + ball.size > canvas.height || ball.y - ball.size < 0) {
    ball.speedY *= -1;
  }
  if (ball.x + ball.size > canvas.width) {
    // Ball hits the right wall
    // You can stop the game by not calling requestAnimationFrame
    return;
  }
  if (ball.x - ball.size < 0) {
    // Ball hits the left wall
    // You can stop the game by not calling requestAnimationFrame
    return;
  }

  // Check ball collision with player 1 paddle
  if (ball.x - ball.size < player1.width && ball.y > player1.y && ball.y < player1.y + player1.height) {
    ball.speedX *= -1;
  }

  // Check ball collision with player 2 paddle
  if (ball.x + ball.size > canvas.width - player2.width && ball.y > player2.y && ball.y < player2.y + player2.height) {
    ball.speedX *= -1;
  }

  // Send player positions to the server
  if (ws.readyState === WebSocket.OPEN) {
    ws.send(JSON.stringify({ type: 'playerPositions', player1: player1.y, player2: player2.y }));
  }

  // Draw the updated state
  draw();

  // Repeat the update function
  requestAnimationFrame(update);
}


    // Gestione degli eventi di pressione dei tasti per i giocatori
document.addEventListener('keydown', (event) => {
  if (event.key === 'w') {
    player1.direction = DIRECTION.UP;
    ws.send(JSON.stringify({ type: 'keypress', key: 'w' }));
  } else if (event.key === 's') {
    player1.direction = DIRECTION.DOWN;
    ws.send(JSON.stringify({ type: 'keypress', key: 's' }));
  } else if (event.key === 'ArrowUp') {
    player2.direction = DIRECTION.UP;
    ws.send(JSON.stringify({ type: 'keypress', key: 'ArrowUp' }));
  } else if (event.key === 'ArrowDown') {
    player2.direction = DIRECTION.DOWN;
    ws.send(JSON.stringify({ type: 'keypress', key: 'ArrowDown' }));
  }
});

// Gestione degli eventi di rilascio dei tasti per i giocatori
document.addEventListener('keyup', (event) => {
  if (event.key === 'w' || event.key === 's') {
    player1.direction = null;
  } else if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {
    player2.direction = null;
  }
});




    // WebSocket events
    ws.onopen = () => {
      console.log('WebSocket connection opened');
    };

    ws.onmessage = (event) => {
      const data = JSON.parse(event.data);

      // Update the game state based on data received from the server
      if (data.type === 'playerPositions') {
        // Assicurati che il messaggio sia destinato al giocatore corrente
        if (data.player1 !== undefined && data.player2 !== undefined) {
          player1.y = data.player1;
          player2.y = data.player2;
        }
      }
    };

    ws.onclose = () => {
      console.log('WebSocket connection closed');
    };

    // Start the game loop
    update();
  </script>

</body>
</html>
